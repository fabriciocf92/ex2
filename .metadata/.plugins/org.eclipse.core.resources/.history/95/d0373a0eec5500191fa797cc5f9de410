package com.teste.campanha;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.teste.campanha.modelos.Campanha;
import com.teste.campanha.modelos.CampanhaCliente;
import com.teste.campanha.modelos.Cliente;
import com.teste.campanha.modelos.Time;
import com.teste.campanha.repositorios.RepositorioCampanha;
import com.teste.campanha.repositorios.RepositorioCampanhaCliente;
import com.teste.campanha.repositorios.RepositorioCliente;
import com.teste.campanha.repositorios.RepositorioTime;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;

@RestController
public class Rotas {

	@Autowired
	private RepositorioCampanha repositorioCampanha;
	
	@Autowired
	private RepositorioTime repositorioTime;
	
	@Autowired
	private RepositorioCliente repositorioCliente;
	
	@Autowired
	private RepositorioCampanhaCliente repositorioCampanhaCliente;
	
	@GetMapping("/campanhas")
	public List<Campanha> retornarCampanhas(){
		return repositorioCampanha.campanhas();
	}
	
	@GetMapping("/campanha/{id}")
	public Optional<Campanha> campanhaPorId(@PathVariable Long id){
		return repositorioCampanha.findById(id);
	}
	
	@Transactional
	@PostMapping("/campanha")
	public Campanha criarCampanha(HttpServletRequest request, @RequestBody Campanha campanha){
		Long timeId = campanha.getTimeId();
		campanha.setTime(timePorId(timeId).get());
		Date fimVigencia = campanha.getFimVigencia();
		Date inicioVigencia = campanha.getFimVigencia();
		List<Campanha> campanhasMesmaVigencia = repositorioCampanha.campanhasPorVigencia(inicioVigencia.toString(),fimVigencia.toString());
		GregorianCalendar cal = new GregorianCalendar();
		if(!campanhasMesmaVigencia.isEmpty()) {
			System.out.print(campanhasMesmaVigencia);
			List<Campanha> campanhas = repositorioCampanha.findAll();
			for (Campanha campanhaAtiva : campanhas) {
				Date fimVigenciaAtiva = campanhaAtiva.getFimVigencia();
				cal.setTime(fimVigenciaAtiva);
				cal.add(Calendar.DATE, 1);
				while(!repositorioCampanha.campanhasPorFimVigencia(cal.getTime().toString()).isEmpty()) {
					cal.add(Calendar.DATE, 1);
				}
				campanhaAtiva.setFimVigencia(cal.getTime());
			}
		}
		return repositorioCampanha.save(campanha);
	}
	
	@Transactional
	@PostMapping("/campanha/{id}")
	public Campanha editarCampanha(HttpServletRequest request, @RequestBody Campanha campanha, @PathVariable Long id){
		campanha.setId(id);
		return repositorioCampanha.save(campanha);
	}
	
	@DeleteMapping("/campanha/{id}")
	public void deletarCampanha(@PathVariable Long id){
		repositorioCampanha.deleteById(id);
	}
	
	@GetMapping("/time/{id}")
	public Optional<Time> timePorId(@PathVariable Long id){
		return repositorioTime.findById(id);
	}
	
	@Transactional
	@PostMapping("/time")
	public Time criarTime(HttpServletRequest request, @RequestBody Time time){
		time = repositorioTime.save(time);
		return time;
	}
	
	@GetMapping("/clientes")
	public List<Cliente> retornarCliente(){
		return repositorioCliente.findAll();
	}
	
	@Transactional
	@PostMapping("/cliente")
	public Cliente criarCliente(HttpServletRequest request, @RequestBody Cliente cliente){
		Long timeId = cliente.getTimeId();
		cliente.setTime(timePorId(timeId).get());
		cliente = repositorioCliente.save(cliente);
		return cliente;
	}
	
	@Transactional
	@PostMapping("/relacao/{cliente_id}/{campanha_id}")
	public CampanhaCliente criarRelacao(@PathVariable Long cliente_id, @PathVariable Long campanha_id){
		Optional<Cliente> cliente = repositorioCliente.findById(cliente_id);
		Optional<Campanha> campanha = repositorioCampanha.findById(campanha_id);
		CampanhaCliente campanhaCliente = new CampanhaCliente();
		campanhaCliente.setCliente(cliente.get());
		campanhaCliente.setCampanha(campanha.get());
		return repositorioCampanhaCliente.save(campanhaCliente);
	}
}
